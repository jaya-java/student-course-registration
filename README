Model Student Course Registration 
Dependencies used: JPA, Hibernate, jpa meta model generators, Spring transational dependency
Student: ID, Name
Course: ID, Name
Data base Tables:
student
course
student_course
A student can take many courses and a course can have many students.
1).Write skeleton code of entity bean (or whatever technologies you like) classes to model Student and Course and student course registration.
 Model/ domain objects with Entity table mapping using JPA annotations:
Student.java
Course.java
2). Write a skeleton Student DAO class that support
	StudentDao.java
	StudentDaoImpl.java
	2.1). add a new student along with their course registrations.
		StudentDaoImpl. add(Student student)
	2.2). Delete a student.
		StudentDaoImpl.delete(Student student)
	2.3).Get all students, sorted by their name, for a given course with course name as input.
		StudentDaoImpl.findStudentByCourseName(String courseName)
‘

	Bonus Points:
	2.4). What if we want to record course scores?  What possible changes need to be made? 
                        Explain briefly.
 if it is score alone associated with course then add score column to student_course joining table and we need to add object StudentCourse objects.
	2.5). How to find all students who don’t register for a given course?  
		StudentDaoImpl.findStudentNotRegistereByCourseName(String courseName
Notes:
Code skeleton is enough. No need to write every single line.  
Need both entity bean classes (again use whatever technologies/framework you like) as well as table DDLs.
For the DAO class need query details for relevant questions.
Show proper transaction management.
Show best practice(s) when you can solve the problems with multiple approaches.  If possible comment why one approach is better than the others.
We love Hibernate and also hate it!! Would love to hear your opinion on best practices. 

Time: 45 – 60 minutes.



